name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout del código
      uses: actions/checkout@v4

    - name: Configurar .NET 9
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0.x'

    - name: Configurar caché de paquetes NuGet
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Restaurar dependencias
      run: dotnet restore

    - name: Compilar el proyecto
      run: dotnet build --configuration Release --no-restore

    - name: Ejecutar pruebas
      run: dotnet test --configuration Release --no-restore

  docker:

    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout del código
      uses: actions/checkout@v4

    - name: Login en Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Construir la imagen Docker con caché
      uses: docker/build-push-action@v4
      with:
        context: ./LibraryConnectAPI/
        file: ./LibraryConnectAPI/Dockerfile
        push: false
        tags: bpdevop/libraryconnectapi:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Ejecutar contenedor para pruebas
      run: |
        docker run -d -p 8080:8080 --name test-container bpdevop/libraryconnectapi:latest
        sleep 5  # Esperar 5 segundos para que la API arranque

    - name: "Prueba: GET /api/products"
      run: |
        RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8080/api/products)
        if [ "$RESPONSE" -ne 200 ]; then
          echo "❌ ERROR: El endpoint GET /api/products no responde correctamente. Código: $RESPONSE"
          exit 1
        else
          echo "✅ GET /api/products respondió con éxito (200)"
        fi

    - name: "Prueba: GET /api/products/1"
      run: |
        RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8080/api/products/1)
        if [ "$RESPONSE" -ne 200 ]; then
          echo "❌ ERROR: El endpoint GET /api/products/1 no responde correctamente. Código: $RESPONSE"
          exit 1
        else
          echo "✅ GET /api/products/1 respondió con éxito (200)"
        fi
    
    - name: Detener y eliminar el contenedor de pruebas
      run: docker stop test-container && docker rm test-container
      
    - name: Subir la imagen a Docker Hub
      run: docker push bpdevop/libraryconnectapi:latest
